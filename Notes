alter table `eam_brb_tmp`.QUESTION add component varchar(255) DEFAULT NULL;        



sound/livechat
record activity in portal
live notifications

#https://www.youtube.com/watch?v=RpWeNzfSUHw&ab_channel=PythonEngineer
#https://www.mygreatlearning.com/blog/masterclass-on-movie-recommendation-system/


Presentation:
  Notes:
    - Rule based Vs Self learning chatbots
    - See other algorithms for chatbot
    - Why bag of words is used in ml count vectorizers #bag_of_words #tfidf #word2vec
      

  - Recommendations
    – Popularity based recommendation systems
    – collaborative based recommendations (watched by both users, next one read by one displayed to other)
    – Content based recommendations (Genre based comedy movies which are most watched are dispalyed to users)
    – Nearest neighbour collaborative filtering  (User-based, Item-based)

      - User based - (collaborative by apply Pearson’s correlation and recommend to other)
      - 

    Resources Required:
    1. rds
    2. Cognito, Dynamodb


###config-parser
#print(config.get("cognito","userpoolid"))
#print(config.sections())
#print(config.items("test"))

###flask app logger
#app.logger.critical("The application is stooped") #app logger


######## Extract all the links  from https://docs.jivox.com/jivox-documentation/how-to-navigate-accounts

var x = document.querySelectorAll("a");
var myarray = []
for (var i=0; i<x.length; i++){
var nametext = x[i].textContent;
var cleantext = nametext.replace(/\s+/g, ' ').trim();
var cleanlink = x[i].href;
myarray.push([cleantext,cleanlink]);
};
function make_table() {
    var table = '<table><thead><th>Name</th><th>Links</th></thead><tbody>';
   for (var i=0; i<myarray.length; i++) {
            table += '<tr><td>'+ myarray[i][0] + '</td><td>'+myarray[i][1]+'</td></tr>';
    };
  
    var w = window.open("");
w.document.write(table); 
}
make_table()


import json
json_data=open('files/questions.json', 'r')
data=dict(json.load(json_data))
d=data.copy()

while(True):
    try:
        d=d["questions"]
        print(d,"\n","\n")
        s=input()
        d=d[s]
        
    except:
        print(d["answer"])
        break


